{"version":3,"sources":["i18n.ts","components/Loader/Loader.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["i18n","use","initReactI18next","init","initImmediate","preload","fallbackLng","lng","ns","defaultNS","interpolation","escapeValue","resources","en","translation","EnTrans","cn","CnTrans","MenuItem","isPage","LoaderContainer","CircularProgress","styled","div","props","ReactGA","initialize","process","history","createBrowserHistory","listen","location","set","page","pathname","pageview","SellerPage","lazy","AboutPage","MerchantsPage","ErrorPage","App","fallback","Loader","path","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s7CAOAA,IACGC,IAAIC,KACJC,KAAK,CACJC,eAAe,EACfC,QAAS,CAAC,KAAM,MAChBC,YAAa,KACbC,IAAK,KAGLC,GAAI,CAAC,eACLC,UAAW,cAIXC,cAAe,CACbC,aAAa,GAGfC,UAAW,CACTC,GAAI,CACFC,YAAaC,GAEfC,GAAI,CACFF,YAAaG,MAKNjB,EAAf,EAAeA,I,0TC3Bf,IAQekB,EARoB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OACpC,OACE,gBAACC,EAAD,CAAiBD,OAAQA,GACvB,gBAACE,EAAA,EAAD,QAOAD,EAAkBE,IAAOC,IAAV,KAMT,SAACC,GAAD,OAAmBA,EAAML,OAAS,QAAU,UCjBxDM,IAAQC,WADWC,kBAGnB,IAAMC,EAAUC,cAGhBD,EAAQE,QAAO,SAACC,GACdN,IAAQO,IAAI,CAAEC,KAAMF,EAASG,WAC7BT,IAAQU,SAASJ,EAASG,aAK5B,IAAME,EAAaC,gBAAK,kBAAM,8DACxBC,EAAYD,gBAAK,kBAAM,iCACvBE,EAAgBF,gBAAK,kBAAM,uDAC3BG,EAAYH,gBAAK,kBAAM,iCAmCdI,E,uKA/BX,OACE,kBAAC,IAAD,CAAQb,QAASA,GACf,kBAAC,WAAD,CAAUc,SAAU,kBAACC,EAAD,CAAQxB,QAAQ,KAClC,kBAAC,IAAD,KAIE,kBAAC,IAAD,CAAOyB,KAAK,UACT,IACD,kBAACN,EAAD,MAAc,KAEhB,kBAAC,IAAD,CAAOM,KAAK,cACT,IACD,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,QACV,kBAACR,EAAD,OAEF,kBAAC,IAAD,CAAOQ,KAAK,cACV,kBAACR,EAAD,OAEF,kBAAC,IAAD,KACE,kBAACI,EAAD,c,GAxBIK,IAAMC,WCZJC,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90bb5c26.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n// the translations\nimport EnTrans from './locales/en/translation.json';\nimport CnTrans from './locales/cn/translation.json';\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    initImmediate: false,\n    preload: ['en', 'cn'],\n    fallbackLng: 'en',\n    lng: 'en',\n\n    // have a common namespace used around the full app\n    ns: ['translation'],\n    defaultNS: 'translation',\n\n    // debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react!!\n    },\n\n    resources: {\n      en: {\n        translation: EnTrans,\n      },\n      cn: {\n        translation: CnTrans,\n      },\n    },\n  });\n\nexport default i18n;\n","import * as React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport styled from 'styled-components';\n\ntype Props = {\n  isPage: Boolean;\n};\n\nconst MenuItem: React.SFC<Props> = ({ isPage }: Props) => {\n  return (\n    <LoaderContainer isPage={isPage}>\n      <CircularProgress />\n    </LoaderContainer>\n  );\n};\n\nexport default MenuItem;\n\nconst LoaderContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: ${(props: Props) => (props.isPage ? '100vh' : '100%')};\n  div {\n    color: #ab192e;\n  }\n`;\n","import { createBrowserHistory } from 'history';\nimport { Router, Switch, Route } from 'react-router-dom';\nimport React, { lazy, Suspense } from 'react';\nimport ReactGA from 'react-ga';\nimport Loader from '../Loader';\n\nconst trackingId = process.env.REACT_APP_GA_TRACKING_ID!;\nReactGA.initialize(trackingId);\n\nconst history = createBrowserHistory();\n\n// Initialize google analytics page view tracking\nhistory.listen((location) => {\n  ReactGA.set({ page: location.pathname }); // Update the user's current page\n  ReactGA.pageview(location.pathname); // Record a pageview for the given page\n});\n\n// we could use template strings, but just to be safe we'll hardcode the\n// lazy imports\nconst SellerPage = lazy(() => import('../SellerPage'));\nconst AboutPage = lazy(() => import('../About'));\nconst MerchantsPage = lazy(() => import('../MerchantsPage'));\nconst ErrorPage = lazy(() => import('../404Page'));\n\nclass App extends React.Component<{}> {\n  render() {\n    return (\n      <Router history={history}>\n        <Suspense fallback={<Loader isPage={true} />}>\n          <Switch>\n            {\n              // TODO(ArtyEmsee): add router config for this route\n            }\n            <Route path=\"/about\">\n              {' '}\n              <AboutPage />{' '}\n            </Route>\n            <Route path=\"/merchants\">\n              {' '}\n              <MerchantsPage />\n            </Route>\n            <Route path=\"/:id\">\n              <SellerPage />\n            </Route>\n            <Route path=\"/:id#story\">\n              <SellerPage />\n            </Route>\n            <Route>\n              <ErrorPage />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './i18n';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}